package forum.action;


import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.struts2.ServletActionContext;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.InterceptorRef;
import org.apache.struts2.convention.annotation.ParentPackage;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;

import forum.model.Board;
import forum.model.Person;
import forum.model.Thread;
import forum.service.IBoardService;
import forum.service.IThreadService;

@ParentPackage("forum")
public class ThreadAction extends ActionSupport {

	private static final long serialVersionUID = 7791832486056262785L;
	
	private Board board;
	private Thread thread;
	
	@Resource
	private IBoardService<Board> boardService;
	
	@Resource
	private IThreadService<Thread> threadService;
	
	@Action(value = "/thread/init-add", interceptorRefs = {@InterceptorRef("loginStack")})
	public String initAdd() throws Exception {
		board = boardService.find(Board.class, board.getId());
		return SUCCESS; 
	}
	
	@Action(value="/thread/add", interceptorRefs = {@InterceptorRef("loginStack")})
	public String add() throws Exception {
			ActionContext cxt = ActionContext.getContext();
			HttpServletRequest request = (HttpServletRequest)cxt.get(ServletActionContext.HTTP_REQUEST);  
			board = boardService.find(Board.class, board.getId());
			Person p = (Person) cxt.getSession().get("user");		//当前登录的用户
			thread.setBoard(board);							//设置版面
			thread.setAuthor(p);							//设置作者
			thread.setAuthorLastReplied(null);				//设置最后回复
			thread.setDateCreated(new Date());				//设置创建日期
			thread.setDateLastReplied(new Date());			//设置最后回复日期
			thread.setIpCreated(request.getRemoteAddr());		//设置当前IP
			thread.setReadonly(false);				//只读标志
			thread.setReplyCount(0);				//设置回复数量
			thread.setTopped(false);				//设置置顶与否
			threadService.create(thread);
		return SUCCESS;
	}

	public void setBoard(Board board) {
		this.board = board;
	}

	public Board getBoard() {
		return board;
	}

	public void setBoardService(IBoardService<Board> boardService) {
		this.boardService = boardService;
	}

	public IBoardService<Board> getBoardService() {
		return boardService;
	}

	public void setThread(Thread thread) {
		this.thread = thread;
	}

	public Thread getThread() {
		return thread;
	}

	public void setThreadService(IThreadService<Thread> threadService) {
		this.threadService = threadService;
	}

	public IThreadService<Thread> getThreadService() {
		return threadService;
	}
	
}
